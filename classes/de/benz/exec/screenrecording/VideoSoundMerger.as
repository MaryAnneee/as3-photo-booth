package de.benz.exec.screenrecording{	 	 import flash.desktop.NativeProcess;	 import flash.desktop.NativeProcessStartupInfo;	 import flash.errors.IllegalOperationError;	 import flash.events.Event;	 import flash.events.EventDispatcher;	 import flash.events.NativeProcessExitEvent;	 import flash.events.ProgressEvent;	 import flash.filesystem.File;    		public class VideoSoundMerger extends EventDispatcher	{				private var exeFile:File;		private var p:NativeProcess;				public function VideoSoundMerger(exeFile:File){			this.exeFile = exeFile;		}								public function run(soundFile:File,videoFile:File,targetFile:File):void{			trace("1: " + soundFile.nativePath);			trace("2: " + videoFile.nativePath);			trace("3: " + targetFile.nativePath);						if(targetFile.exists){				targetFile.deleteFile();			}						p = new NativeProcess();			p.addEventListener(ProgressEvent.STANDARD_OUTPUT_DATA, onOutputData);			p.addEventListener(ProgressEvent.STANDARD_ERROR_DATA, onErrorData);			p.addEventListener(NativeProcessExitEvent.EXIT, onExit);			var startupInfo:NativeProcessStartupInfo = new NativeProcessStartupInfo();				startupInfo.executable = exeFile;			startupInfo.workingDirectory = File.desktopDirectory;							var processArgs:Vector.<String> = new Vector.<String>();				processArgs.push("-isync");				processArgs.push("-f");			processArgs.push("s16be");			processArgs.push("-i");			processArgs.push(soundFile.nativePath);			processArgs.push("-i");			processArgs.push(videoFile.nativePath); 			processArgs.push("-acodec");			processArgs.push("aac"); 			processArgs.push("-vcodec"); 			processArgs.push("copy"); 			processArgs.push(targetFile.nativePath);						startupInfo.arguments = processArgs;                              			try {				trace("try...");           		p.start(startupInfo);            } catch (e:IllegalOperationError) {                trace("Illegal Operation: "+e.toString());            } catch (ae:ArgumentError) {                trace("Argument Error: "+ae.toString());            } catch (e:Error) {                trace ("Error: "+e.toString());            }       		}					public function onExit(e:NativeProcessExitEvent):void {			trace("Native Process Exit code: "+e.exitCode);			dispatchEvent(new Event(Event.COMPLETE));		}				[Bindable]		public var output:String ="";				private function onOutputData(evt:ProgressEvent):void{			output +="\n"+p.standardOutput.readUTFBytes(p.standardOutput.bytesAvailable);			trace("output: " + evt.toString());		}					private function onErrorData(evt: ProgressEvent):void{			output +="\n"+p.standardError.readUTFBytes(p.standardError.bytesAvailable);			trace("error: " + evt.toString());		}	}}